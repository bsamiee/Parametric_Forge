# Title         : db-tools.nix
# Author        : Bardia Samiee
# Project       : Parametric Forge
# License       : MIT
# Path          : modules/home/programs/languages/db-tools.nix
# ----------------------------------------------------------------------------
# Database and SQL tooling for interactive queries, linting, and analytics.

{ pkgs, lib, ... }:

let
  sharedLibExt = pkgs.stdenv.hostPlatform.extensions.sharedLibrary;
  sqleanLibDir = "${pkgs.sqlean}/lib";
  sqliteVecLib = "${pkgs.sqlite-vec}/lib/sqlite-vec0${sharedLibExt}";
  spatialiteLib = "${pkgs.libspatialite}/lib/mod_spatialite${sharedLibExt}";
  loadSqlean = module: ''.load ${sqleanLibDir}/sqlean-${module}${sharedLibExt}'';
in
{
  home.packages = with pkgs; [
    sqlite-interactive # Enhanced sqlite3 shell with line editing and metadata helpers
    sqlite-vec         # Vector similarity extension for SQLite
    sqlite-utils       # Python-based CLI for SQLite database management
    libspatialite      # Spatial SQL extension for geospatial work
    sqlfluff           # SQL linter and formatter supporting multiple dialects
    sqlcheck           # Static analysis for detecting SQL anti-patterns
    duckdb             # In-memory analytics database with SQL interface
    sqlean             # Extension library bundle (regexp, uuid, stats, etc.)
  ];

  home.file.".sqliterc".text = lib.concatStringsSep "\n" (
    [
      "-- Auto-generated by Home Manager (Parametric Forge)"
      "-- Loads SQLite extensions and configures interactive defaults"
    ]
    ++ (map loadSqlean [ "regexp" "uuid" "stats" "text" "time" "crypto" "math" ])
    ++ [
      ".load ${sqliteVecLib}"
      ".load ${spatialiteLib}"
      ""
      "PRAGMA journal_mode = WAL;"
      "PRAGMA synchronous = NORMAL;"
      "PRAGMA cache_size = -64000;"
      "PRAGMA mmap_size = 268435456;"
      ""
      ".mode column"
      ".headers on"
      ".nullvalue NULL"
    ]
  );
}
