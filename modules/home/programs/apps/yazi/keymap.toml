# Title         : keymap.toml
# Author        : Bardia Samiee
# Project       : Parametric Forge
# License       : MIT
# Path          : modules/home/programs/apps/yazi/keymap.toml
# ----------------------------------------------------------------------------
# Custom keybindings for Yazi file manager
# Primary Modifier:		Right Shift     → Power (⌥⌃⇧)   leader "<A-C-S>"	| Not used by Zellij
# Secondary Modifier:	Right Option    → Super (⌘⌥⌃)   leader "<D-A-C>" 	| Heavily used by Zellij
# Tertiary Modifier: 	Right Command   → Hyper (⌘⌥⌃⇧)  leader "<D-A-C-S>" 	| Mainly used by Zellij

# <D> = Super 	(Command/⌘)
# <A> = Alt 	(Option/⌥)
# <C> = Ctrl 	(Control/⌃)
# <S> = Shift 	(⇧)

"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[mgr]
keymap = [
	# --- Custom Shell Keybindings ---------------------------------------------
	{ on = "<A-C-S-t>",   run = "shell 'zellij-toggle-sidebar.sh'",                     desc = "Toggle Zellij sidebar layout" },

	# Keybind below is used by integration script for hover preview
	{ on = "<A-C-S-p>",   run = 'plugin piper -- eza -TL=3 --color=always --icons=always --group-directories-first --no-quotes "$0"', desc = "Preview hovered directory" },

	# --- System Integration ---------------------------------------------------
	{ on = "<A-C-S-e>",   run = "plugin augment-command -- editor",                     desc = "Open in $EDITOR" },
	{ on = "<A-C-S-l>",   run = "plugin augment-command -- pager",                      desc = "Open in $PAGER" },
	{ on = "<C-p>",       run = 'shell -- qlmanage -p "$@"',                            desc = "macOS Quick Look" },

	# --- Special --------------------------------------------------------------
	# Command Palette
	{ on = "<A-C-S-k>",   run = "plugin augment-command -- emit --augmented",           desc = "Augment command palette" },
	# Shell Related
	{ on = ";",           run = "plugin augment-command -- shell --interactive",          desc = "Run a shell command" },
	{ on = ":",           run = "plugin augment-command -- shell --block --interactive",  desc = "Run a shell command (block until finishes)" },
	# Toggle Panes
	{ on = "[",           run = "plugin toggle-pane min-parent",                        desc = "Toggle parent pane (left)" },
	{ on = "]",           run = "plugin toggle-pane min-preview",                       desc = "Toggle preview pane (right)" },
	{ on = "\\",          run = "plugin toggle-pane max-current",                       desc = "Maximize/restore current pane (middle)" },
	# Miscellaneous
	{ on = ".",           run = "hidden toggle",                                        desc = "Toggle the visibility of hidden files" },

	# --- Modalities -----------------------------------------------------------
	# Toggle
	{ on = "<Space>",     run = [ "toggle", "arrow next" ],                             desc = "Toggle the current selection state" },
	{ on = "<C-a>",       run = "toggle_all --state=on",                                desc = "Select all files" },
	{ on = "<C-r>",       run = "toggle_all",                                           desc = "Invert selection of all files" },
	# Visual mode
	{ on = "v",           run = "visual_mode",                                          desc = "Enter visual mode (selection mode)" },
	{ on = "V",           run = "visual_mode --unset",                                  desc = "Enter visual mode (unset mode)" },
	# Spotting
	{ on = "<Tab>",       run = "spot",                                                 desc = "Spot hovered file" },
	# Tasks
	# { on = "w",         run = "tasks:show",                                           desc = "Show task manager" },
	# Help
	{ on = "`",           run = "help",                                                 desc = "Open help" },
	{ on = "<F1>",        run = "help",                                                 desc = "Open help" },

	# --- Navigation -----------------------------------------------------------
	# Commands
	{ on = "<A-C-S-h>",   run = "plugin augment-command -- parent_arrow -1",            desc = "Navigate parent up" },
	{ on = "<A-C-S-j>",   run = "plugin augment-command -- parent_arrow 1",             desc = "Navigate parent down" },
	# Seeking
	{ on = "K",           run = "seek -5",                                              desc = "Seek up 5 units in the preview" },
	{ on = "J",           run = "seek 5",                                               desc = "Seek down 5 units in the preview" },
	# Arrow Keys
	{ on = "<Left>",      run = "plugin augment-command -- leave",                      desc = "Back to the parent directory" },
	{ on = "<Down>",      run = "plugin augment-command -- arrow 1",                    desc = "Next file" },
	{ on = "<Up>",        run = "plugin augment-command -- arrow -1",                   desc = "Previous file" },
	{ on = "<Right>",     run = "plugin augment-command -- enter",                      desc = "Enter the child directory" },
	# VIM Keys
	{ on = "h",           run = "plugin augment-command -- leave",                      desc = "Back to the parent directory" },
	{ on = "j",           run = "plugin augment-command -- arrow 1",                    desc = "Next file" },
	{ on = "k",           run = "plugin augment-command -- arrow -1",                   desc = "Previous file" },
	{ on = "l",           run = "plugin augment-command -- enter",                      desc = "Enter the child directory" },
	# Goto
	{ on = [ "g", "t" ],       	run = "plugin augment-command -- arrow top",           	desc = "Go to top" },
	{ on = [ "g", "b" ],       	run = "plugin augment-command -- arrow bot",            desc = "Go to bottom" },
	{ on = [ "g", "h" ],       	run = "cd ~",                                           desc = "Go home" },
	{ on = [ "g", "c" ],       	run = "cd ~/.config",                                   desc = "Go ~/.config" },
	{ on = [ "g", "d" ],       	run = "cd ~/Downloads",                                 desc = "Go ~/Downloads" },
	{ on = [ "g", "<Space>" ], 	run = "cd --interactive",                               desc = "Jump interactively" },
	{ on = [ "g", "z" ],       	run = "shell --block 'yazi-zoxide-cdi.sh'",             desc = "Jump to a directory via zoxide (cdi)" },
	{ on = [ "g", "f" ],       	run = "follow",                                         desc = "Follow hovered symlink" },
	# Tabs
	{ on = "<A-C-S-[>",   run = "tab_switch -1 --relative",                       		desc = "Switch to previous tab" },
	{ on = "<A-C-S-]>",   run = "tab_switch 1 --relative",                        		desc = "Switch to next tab" },
	{ on = "<C-[>",       run = "tab_swap -1",                                    		desc = "Swap current tab with previous tab" },
	{ on = "<C-]>",		  run = "tab_swap 1",                                     		desc = "Swap current tab with next tab" },
	{ on = "t",           run = "plugin augment-command -- tab_create",                 desc = "Create a new tab from the hovered selection" },
	{ on = "1",           run = "plugin augment-command -- tab_switch 0",               desc = "Switch to first tab" },
	{ on = "2",           run = "plugin augment-command -- tab_switch 1",               desc = "Switch to second tab" },
	{ on = "3",           run = "plugin augment-command -- tab_switch 2",               desc = "Switch to third tab" },
	{ on = "4",           run = "plugin augment-command -- tab_switch 3",               desc = "Switch to fourth tab" },
	{ on = "5",           run = "plugin augment-command -- tab_switch 4",               desc = "Switch to fifth tab" },
	{ on = "6",           run = "plugin augment-command -- tab_switch 5",               desc = "Switch to sixth tab" },
	{ on = "7",           run = "plugin augment-command -- tab_switch 6",               desc = "Switch to seventh tab" },
	{ on = "8",           run = "plugin augment-command -- tab_switch 7",               desc = "Switch to eighth tab" },
	{ on = "9",           run = "plugin augment-command -- tab_switch 8",               desc = "Switch to ninth tab" },

	# --- Operations -----------------------------------------------------------
	# Mount management
	{ on = "M",           run = "plugin mount",                                         desc = "Mount manager" },
	# Exiting & Cancelling
	{ on = "<A-C-S-w>",   run = "close",                                                desc = "Close current tab (Power+w), or quit if last" },
	{ on = "<A-C-S-q>",   run = "plugin augment-command -- quit",                       desc = "Quit Yazi (Power+q)" },
	{ on = "<Esc>",       run = "escape",                                               desc = "Exit VI mode, clear selection, or cancel search" },
	{ on = "<C-z>",       run = "suspend",                                              desc = "Suspend the process" },
	# Opening
	{ on = "o",           run = "plugin augment-command -- open",                       desc = "Open selected files" },
	{ on = "O",           run = "plugin augment-command -- open --interactive",         desc = "Open selected files interactively" },
	{ on = "<Enter>",     run = "plugin augment-command -- open",                       desc = "Open selected files" },
	{ on = "<S-Enter>",   run = "plugin augment-command -- open --interactive",         desc = "Open selected files interactively" },
	# Yank/Cut
	{ on = [ "y", "y" ],  run = "yank",                                                 desc = "Yank selected files (copy)" },
	{ on = [ "y", "x" ],  run = "yank --cut",                                           desc = "Yank selected files (cut)" },
	{ on = [ "y", "z" ],  run = "unyank",                                               desc = "Cancel the yank status" },
	{ on = [ "y", "-" ],  run = "link",                                                 desc = "Symlink the absolute path of yanked files" },
	{ on = [ "y", "_" ],  run = "link --relative",                                      desc = "Symlink the relative path of yanked files" },
	{ on = [ "y", "h" ],  run = "hardlink",                                             desc = "Hardlink yanked files" },
	# Copy
	{ on = [ "c", "c" ],  run = "copy path",                                            desc = "Copy the file path" },
	{ on = [ "c", "d" ],  run = "copy dirname",                                         desc = "Copy the directory path" },
	{ on = [ "c", "f" ],  run = "copy filename",                                        desc = "Copy the filename" },
	{ on = [ "c", "n" ],  run = "copy name_without_ext",                                desc = "Copy the filename without extension" },
	# Paste
	{ on = "p",           run = "plugin augment-command -- paste",                      desc = "Paste yanked files" },
	{ on = "P",           run = "plugin augment-command -- paste --force",              desc = "Paste yanked files (overwrite if the destination exists)" },
	# Trash/Deleting
	{ on = "d",           run = "plugin augment-command -- remove",                     desc = "Trash selected files" },
	{ on = "D",           run = "plugin augment-command -- remove --permanently",       desc = "Permanently delete selected files" },
	# Creation / Naming
	{ on = "a",           run = "plugin augment-command -- create",                     desc = "Create a file (ends with / for directories)" },
	{ on = "A",           run = "plugin augment-command -- archive",                    desc = "Create archive" },
	{ on = "r",           run = "plugin augment-command -- rename --cursor=before_ext", desc = "Rename selected file(s)" },
	# Searching
	{ on = "f",           run = "filter --smart",                                       desc = "Filter files" },
	{ on = "F",           run = "plugin jump-to-char",                                  desc = "Jump to file/directory starting with character" },
	{ on = "<C-f>",       run = "plugin fzf",                                           desc = "Jump to a file/directory via fzf" },
	{ on = "s",           run = "search --via=fd",                                      desc = "Search files by name via fd" },
	{ on = "S",           run = "search --via=rg",                                      desc = "Search files by content via ripgrep" },
	{ on = "<C-s>",       run = "escape --search",                                      desc = "Cancel the ongoing search" },
	# Find
	{ on = "/",           run = "find --smart",                                         desc = "Find next file" },
	{ on = "?",           run = "find --previous --smart",                              desc = "Find previous file" },
	{ on = "n",           run = "find_arrow",                                           desc = "Next found" },
	{ on = "N",           run = "find_arrow --previous",                                desc = "Previous found" },
	# Sorting
	{ on = [ ",", "m" ],  run = [ "sort mtime --reverse=no", "linemode mtime" ],        desc = "Sort by modified time" },
	{ on = [ ",", "M" ],  run = [ "sort mtime --reverse", "linemode mtime" ],           desc = "Sort by modified time (reverse)" },
	{ on = [ ",", "b" ],  run = [ "sort btime --reverse=no", "linemode btime" ],        desc = "Sort by birth time" },
	{ on = [ ",", "B" ],  run = [ "sort btime --reverse", "linemode btime" ],           desc = "Sort by birth time (reverse)" },
	{ on = [ ",", "e" ],  run = "sort extension --reverse=no",                          desc = "Sort by extension" },
	{ on = [ ",", "E" ],  run = "sort extension --reverse",                             desc = "Sort by extension (reverse)" },
	{ on = [ ",", "a" ],  run = "sort alphabetical --reverse=no",                       desc = "Sort alphabetically" },
	{ on = [ ",", "A" ],  run = "sort alphabetical --reverse",                          desc = "Sort alphabetically (reverse)" },
	{ on = [ ",", "n" ],  run = "sort natural --reverse=no",                            desc = "Sort naturally" },
	{ on = [ ",", "N" ],  run = "sort natural --reverse",                               desc = "Sort naturally (reverse)" },
	{ on = [ ",", "s" ],  run = [ "sort size --reverse=no", "linemode size" ],          desc = "Sort by size" },
	{ on = [ ",", "S" ],  run = [ "sort size --reverse", "linemode size" ],             desc = "Sort by size (reverse)" },
	{ on = [ ",", "r" ],  run = "sort random --reverse=no",                             desc = "Sort randomly" },
	# Linemode
	{ on = [ "L", "s" ],  run = "linemode size",                                        desc = "Linemode: size" },
	{ on = [ "L", "p" ],  run = "linemode permissions",                                 desc = "Linemode: permissions" },
	{ on = [ "L", "b" ],  run = "linemode btime",                                       desc = "Linemode: btime" },
	{ on = [ "L", "m" ],  run = "linemode mtime",                                       desc = "Linemode: mtime" },
	{ on = [ "L", "o" ],  run = "linemode owner",                                       desc = "Linemode: owner" },
	{ on = [ "L", "n" ],  run = "linemode none",                                        desc = "Linemode: none" },
]

[tasks]
keymap = [
	# --- Core -----------------------------------------------------------------
	{ on = "<Esc>",       run = "close",                                                desc = "Close task manager" },
	{ on = "w",           run = "close",                                                desc = "Close task manager" },
	{ on = "<Enter>",     run = "inspect",                                              desc = "Inspect the task" },
	{ on = "x",           run = "cancel",                                               desc = "Cancel the task" },
	# Help
	{ on = "`",           run = "help",                                                 desc = "Open help" },
	{ on = "<F1>",        run = "help",                                                 desc = "Open help" },

	# --- Navigation -----------------------------------------------------------
	# Arrow Keys
	{ on = "<Up>",        run = "arrow prev",                                           desc = "Previous task" },
	{ on = "<Down>",      run = "arrow next",                                           desc = "Next task" },
	# VIM Keys
	{ on = "k",           run = "arrow prev",                                           desc = "Previous task" },
	{ on = "j",           run = "arrow next",                                           desc = "Next task" },
]

[spot]
keymap = [
	# --- Core -----------------------------------------------------------------
	{ on = "<Esc>",       run = "close",                                                desc = "Close the spot" },
	{ on = "<C-w>",       run = "close",                                                desc = "Close the spot" },
	{ on = "<Tab>",       run = "close",                                                desc = "Close the spot" },
	# Help
	{ on = "`",           run = "help",                                                 desc = "Open help" },
	{ on = "<F1>",        run = "help",                                                 desc = "Open help" },
	# Copy
	{ on = [ "c", "c" ],  run = "copy cell",                                            desc = "Copy selected cell" },

	# --- Navigation -----------------------------------------------------------
	# Arrow Keys
	{ on = "<Up>",        run = "arrow prev",                                           desc = "Previous line" },
	{ on = "<Down>",      run = "arrow next",                                           desc = "Next line" },
	{ on = "<Left>",      run = "swipe prev",                                           desc = "Swipe to previous file" },
	{ on = "<Right>",     run = "swipe next",                                           desc = "Swipe to next file" },
	# VIM Keys
	{ on = "k",           run = "arrow prev",                                           desc = "Previous line" },
	{ on = "j",           run = "arrow next",                                           desc = "Next line" },
	{ on = "h",           run = "swipe prev",                                           desc = "Swipe to previous file" },
	{ on = "l",           run = "swipe next",                                           desc = "Swipe to next file" },
]

[pick]
keymap = [
	# --- Core -----------------------------------------------------------------
	{ on = "<Esc>",       run = "close",                                                desc = "Cancel pick" },
	{ on = "<C-[>",       run = "close",                                                desc = "Cancel pick" },
	{ on = "<C-c>",       run = "close",                                                desc = "Cancel pick" },
	{ on = "<Enter>",     run = "close --submit",                                       desc = "Submit the pick" },
	# Help
	{ on = "`",           run = "help",                                                 desc = "Open help" },
	{ on = "<F1>",        run = "help",                                                 desc = "Open help" },

	# --- Navigation -----------------------------------------------------------
	# Arrow Keys
	{ on = "<Up>",        run = "arrow prev",                                           desc = "Previous option" },
	{ on = "<Down>",      run = "arrow next",                                           desc = "Next option" },
	# VIM Keys
	{ on = "k",           run = "arrow prev",                                           desc = "Previous option" },
	{ on = "j",           run = "arrow next",                                           desc = "Next option" },
]

[input]
keymap = [
	# --- Core -----------------------------------------------------------------
	{ on = "<C-c>",       run = "close",                                                desc = "Cancel input" },
	{ on = "<Enter>",     run = "close --submit",                                       desc = "Submit input" },
	{ on = "<Esc>",       run = "escape",                                               desc = "Back to normal mode, or cancel input" },
	# Help
	{ on = "`",           run = "help",                                                 desc = "Open help" },
	{ on = "<F1>",        run = "help",                                                 desc = "Open help" },

	# --- Modalities -----------------------------------------------------------
	{ on = "i",           run = "insert",                                               desc = "Enter insert mode" },
	{ on = "I",           run = [ "move first-char", "insert" ],                        desc = "Move to the BOL, and enter insert mode" },
	{ on = "a",           run = "insert --append",                                      desc = "Enter append mode" },
	{ on = "A",           run = [ "move eol", "insert --append" ],                      desc = "Move to the EOL, and enter append mode" },
	{ on = "v",           run = "visual",                                               desc = "Enter visual mode" },
	{ on = "r",           run = "replace",                                              desc = "Replace a single character" },

	# --- Selection ------------------------------------------------------------
	{ on = "V",           run = [ "move bol", "visual", "move eol" ],                   desc = "Select from BOL to EOL" },
	{ on = "<C-A>",       run = [ "move eol", "visual", "move bol" ],                   desc = "Select from EOL to BOL" },
	{ on = "<C-E>",       run = [ "move bol", "visual", "move eol" ],                   desc = "Select from BOL to EOL" },

	# --- Navigation -----------------------------------------------------------
	# Arrow Keys
	{ on = "<Left>",      run = "move -1",                                              desc = "Move back a character" },
	{ on = "<Right>",     run = "move 1",                                               desc = "Move forward a character" },
	# VIM Keys
	{ on = "h",           run = "move -1",                                              desc = "Move back a character" },
	{ on = "l",           run = "move 1",                                               desc = "Move forward a character" },
	# Emacs Keys
	{ on = "<C-b>",       run = "move -1",                                              desc = "Move back a character" },
	{ on = "<C-f>",       run = "move 1",                                               desc = "Move forward a character" },
	# Word-wise movement
	{ on = "b",           run = "backward",                                             desc = "Move back to the start of the current or previous word" },
	{ on = "B",           run = "backward --far",                                       desc = "Move back to the start of the current or previous WORD" },
	{ on = "w",           run = "forward",                                              desc = "Move forward to the start of the next word" },
	{ on = "W",           run = "forward --far",                                        desc = "Move forward to the start of the next WORD" },
	{ on = "e",           run = "forward --end-of-word",                                desc = "Move forward to the end of the current or next word" },
	{ on = "E",           run = "forward --far --end-of-word",                          desc = "Move forward to the end of the current or next WORD" },
	{ on = "<A-b>",       run = "backward",                                             desc = "Move back to the start of the current or previous word" },
	{ on = "<A-f>",       run = "forward --end-of-word",                                desc = "Move forward to the end of the current or next word" },
	# Line-wise movement
	{ on = "0",           run = "move bol",                                             desc = "Move to the BOL" },
	{ on = "$",           run = "move eol",                                             desc = "Move to the EOL" },
	{ on = "_",           run = "move first-char",                                      desc = "Move to the first non-whitespace character" },
	{ on = "^",           run = "move first-char",                                      desc = "Move to the first non-whitespace character" },
	{ on = "<C-a>",       run = "move bol",                                             desc = "Move to the BOL" },
	{ on = "<C-e>",       run = "move eol",                                             desc = "Move to the EOL" },
	{ on = "<Home>",      run = "move bol",                                             desc = "Move to the BOL" },
	{ on = "<End>",       run = "move eol",                                             desc = "Move to the EOL" },

	# --- Operations -----------------------------------------------------------
	# Undo/Redo
	{ on = "z",           run = "undo",                                                 desc = "Undo the last operation" },
	{ on = "Z",           run = "redo",                                                 desc = "Redo the last operation" },
	# Delete
	{ on = "<Backspace>", run = "backspace",                                            desc = "Delete the character before the cursor" },
	{ on = "<Delete>",    run = "backspace --under",                                    desc = "Delete the character under the cursor" },
	{ on = "<C-h>",       run = "backspace",                                            desc = "Delete the character before the cursor" },
	{ on = "<C-d>",       run = "backspace --under",                                    desc = "Delete the character under the cursor" },
	# Kill
	{ on = "<C-u>",       run = "kill bol",                                             desc = "Kill backwards to the BOL" },
	{ on = "<C-k>",       run = "kill eol",                                             desc = "Kill forwards to the EOL" },
	{ on = "<C-w>",       run = "kill backward",                                        desc = "Kill backwards to the start of the current word" },
	{ on = "<A-d>",       run = "kill forward",                                         desc = "Kill forwards to the end of the current word" },
	# Cut
	{ on = "d",           run = "delete --cut",                                         desc = "Cut selected characters" },
	{ on = "D",           run = [ "delete --cut", "move eol" ],                         desc = "Cut until EOL" },
	{ on = "c",           run = "delete --cut --insert",                                desc = "Cut selected characters, and enter insert mode" },
	{ on = "C",           run = [ "delete --cut --insert", "move eol" ],                desc = "Cut until EOL, and enter insert mode" },
	{ on = "s",           run = [ "delete --cut --insert", "move 1" ],                  desc = "Cut current character, and enter insert mode" },
	{ on = "S",           run = [ "move bol", "delete --cut --insert", "move eol" ],    desc = "Cut from BOL until EOL, and enter insert mode" },
	{ on = "x",           run = [ "delete --cut", "move 1 --in-operating" ],            desc = "Cut current character" },
	# Yank
	{ on = "y",           run = "yank",                                                 desc = "Copy selected characters" },
	# Paste
	{ on = "p",           run = "paste",                                                desc = "Paste copied characters after the cursor" },
	{ on = "P",           run = "paste --before",                                       desc = "Paste copied characters before the cursor" },
]

[confirm]
keymap = [
	# --- Core -----------------------------------------------------------------
	{ on = "<Esc>",       run = "close",                                                desc = "Cancel the confirm" },
	{ on = "<C-w>",       run = "close",                                                desc = "Cancel the confirm" },
	{ on = "<Enter>",     run = "close --submit",                                       desc = "Submit the confirm" },
	# Help
	{ on = "`",           run = "help",                                                 desc = "Open help" },
	{ on = "<F1>",        run = "help",                                                 desc = "Open help" },

	# --- Navigation -----------------------------------------------------------
	# Arrow Keys
	{ on = "<Up>",        run = "arrow prev",                                           desc = "Previous line" },
	{ on = "<Down>",      run = "arrow next",                                           desc = "Next line" },
	# VIM Keys
	{ on = "k",           run = "arrow prev",                                           desc = "Previous line" },
	{ on = "j",           run = "arrow next",                                           desc = "Next line" },
	# --- Operations -----------------------------------------------------------
	{ on = "n",           run = "close",                                                desc = "Cancel the confirm" },
	{ on = "y",           run = "close --submit",                                       desc = "Submit the confirm" },
]

[cmp]
keymap = [
	# --- Core -----------------------------------------------------------------
	{ on = "<C-w>",       run = "close",                                                desc = "Cancel completion" },
	{ on = "<Tab>",       run = "close --submit",                                       desc = "Submit the completion" },
	{ on = "<Enter>",     run = [ "close --submit", "input:close --submit" ],           desc = "Complete and submit the input" },
	# Help
	{ on = "`",           run = "help",                                                 desc = "Open help" },
	{ on = "<F1>",        run = "help",                                                 desc = "Open help" },

	# --- Navigation -----------------------------------------------------------
	# Arrow Keys
	{ on = "<Up>",        run = "arrow prev",                                           desc = "Previous item" },
	{ on = "<Down>",      run = "arrow next",                                           desc = "Next item" },
	# VIM Keys
	{ on = "<A-k>",       run = "arrow prev",                                           desc = "Previous item" },
	{ on = "<A-j>",       run = "arrow next",                                           desc = "Next item" },
	# Emacs Keys
	{ on = "<C-p>",       run = "arrow prev",                                           desc = "Previous item" },
	{ on = "<C-n>",       run = "arrow next",                                           desc = "Next item" },
]

[help]
keymap = [
	# --- Core -----------------------------------------------------------------
	{ on = "<Esc>",       run = "escape",                                               desc = "Clear the filter, or hide the help" },
	{ on = "<C-w>",       run = "close",                                                desc = "Hide the help" },
	# Filtering
	{ on = "f",           run = "filter",                                               desc = "Filter help items" },

	# --- Navigation -----------------------------------------------------------
	# Arrow Keys
	{ on = "<Up>",        run = "arrow prev",                                           desc = "Previous line" },
	{ on = "<Down>",      run = "arrow next",                                           desc = "Next line" },
	# VIM Keys
	{ on = "k",           run = "arrow prev",                                           desc = "Previous line" },
	{ on = "j",           run = "arrow next",                                           desc = "Next line" },
]
