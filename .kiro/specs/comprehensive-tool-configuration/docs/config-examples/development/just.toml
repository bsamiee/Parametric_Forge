# Title         : just.toml
# Author        : Bardia Samiee
# Project       : Parametric Forge
# License       : MIT
# Path          : 01.home/00.core/configs/development/just.toml
# ----------------------------------------------------------------------------
# Just task runner configuration for consistent project automation and
# development workflow standardization across different project types.

# --- Core Settings ------------------------------------------------------------
# Basic just behavior and execution settings

# Default shell for recipe execution
shell = ["zsh", "-cu"]         # Use zsh with -c (command) and -u (error on undefined vars)

# Working directory behavior
set-dotenv-load := true        # Automatically load .env files
set-export := true             # Export all variables to recipes
set-positional-arguments := true  # Allow positional arguments in recipes

# --- Output and Display Configuration ----------------------------------------
# Control how just displays information and output

# Color output settings
set-color := "auto"            # Auto-detect color support: auto, always, never

# Recipe listing behavior
list-heading := "Available recipes:\n"  # Header for recipe list
list-prefix := "  "            # Prefix for recipe list items

# Verbosity and logging
set-quiet := false             # Show recipe names before execution
set-verbose := false           # Don't show recipe commands by default

# --- Recipe Discovery and Loading -------------------------------------------- 
# Configure how just finds and loads justfiles

# Justfile search behavior
set-fallback := true           # Search parent directories for justfiles
set-allow-duplicate-recipes := false  # Prevent duplicate recipe names

# Recipe execution settings
set-ignore-comments := false   # Include comments in recipe parsing
set-unstable := false          # Disable unstable features for stability

# --- Integration with Development Tools ---------------------------------------
# Configure integration with common development tools and workflows

# Default recipe chooser for interactive selection
chooser := "fzf --height=40% --reverse --border"  # Use fzf for recipe selection

# --- Environment Variable Configuration --------------------------------------
# Set up environment variables for consistent tool behavior

[env]
# --- Build and Development Settings ----------------------------------
RUST_LOG = "info"              # Default Rust logging level
RUST_BACKTRACE = "1"           # Enable Rust backtraces for debugging
NODE_ENV = "development"       # Default Node.js environment
PYTHONPATH = "."               # Include current directory in Python path

# --- Tool Configuration Variables ------------------------------------
HYPERFINE_DEFAULT_OPTS = "--warmup 3 --min-runs 10"  # Consistent benchmarking
JQ_COLORS = "1;90:0;37:0;37:0;37:0;32:1;37:1;37"     # Custom jq colors
BAT_THEME = "Monokai Extended"  # Consistent syntax highlighting theme

# --- XDG Base Directory Compliance -----------------------------------
# Ensure tools use XDG-compliant directories when possible
CARGO_HOME = "$XDG_DATA_HOME/cargo"           # Rust package cache
RUSTUP_HOME = "$XDG_DATA_HOME/rustup"         # Rust toolchain data
NPM_CONFIG_CACHE = "$XDG_CACHE_HOME/npm"      # npm cache directory
POETRY_CACHE_DIR = "$XDG_CACHE_HOME/poetry"   # Poetry cache directory

# --- Platform-Specific Configuration -----------------------------------------
# Handle differences between macOS and Linux environments

[env.darwin]
# macOS-specific environment variables
BROWSER = "open"               # Use macOS open command for browser
EDITOR = "code -w"             # VS Code with wait flag on macOS

[env.linux]
# Linux-specific environment variables  
BROWSER = "xdg-open"           # Use xdg-open for browser on Linux
EDITOR = "nvim"                # Neovim as default editor on Linux

# --- Recipe Templates and Patterns -------------------------------------------
# Common recipe patterns for different project types

[templates]
# Template for common development tasks
dev_server = '''
#!/usr/bin/env zsh
# Start development server with hot reload
echo "🚀 Starting development server..."
case "$(basename $PWD)" in
  *-rust|*-rs)
    cargo watch -x "run --bin server"
    ;;
  *-node|*-js|*-ts)
    if [[ -f "package.json" ]]; then
      npm run dev || yarn dev || pnpm dev
    fi
    ;;
  *-python|*-py)
    if [[ -f "pyproject.toml" ]]; then
      poetry run python -m uvicorn main:app --reload
    elif [[ -f "requirements.txt" ]]; then
      python -m uvicorn main:app --reload
    fi
    ;;
  *)
    echo "❌ Unknown project type"
    exit 1
    ;;
esac
'''

# Template for testing workflows
test_runner = '''
#!/usr/bin/env zsh
# Run tests with coverage and reporting
echo "🧪 Running tests..."
case "$(basename $PWD)" in
  *-rust|*-rs)
    cargo test --all-features
    ;;
  *-node|*-js|*-ts)
    npm test || yarn test || pnpm test
    ;;
  *-python|*-py)
    if [[ -f "pyproject.toml" ]]; then
      poetry run pytest --cov=. --cov-report=html
    else
      pytest --cov=. --cov-report=html
    fi
    ;;
  *)
    echo "❌ Unknown project type"
    exit 1
    ;;
esac
'''

# Template for code formatting
format_code = '''
#!/usr/bin/env zsh
# Format code using appropriate tools
echo "🎨 Formatting code..."
if [[ -f "Cargo.toml" ]]; then
  cargo fmt
  cargo clippy --fix --allow-dirty --allow-staged
elif [[ -f "package.json" ]]; then
  npx prettier --write .
  npx eslint --fix .
elif [[ -f "pyproject.toml" ]] || [[ -f "setup.py" ]]; then
  ruff format .
  ruff check --fix .
elif [[ -f "*.nix" ]]; then
  nixfmt **/*.nix
fi
echo "✅ Code formatting complete"
'''

# --- Performance and Optimization Settings -----------------------------------
# Configure just for optimal performance

# Execution optimization
set-shell-args := ["-cu"]      # Optimized shell arguments
set-tempdir-suffix := "just"   # Custom temporary directory suffix

# Recipe caching and performance
set-dotenv-filename := ".env"  # Standard .env filename
set-dotenv-path := "."         # Look for .env in current directory

# --- Integration Hooks -------------------------------------------------------
# Configure hooks for integration with other tools

[hooks]
# Pre-execution hooks
pre_recipe = '''
# Check for required tools before recipe execution
if ! command -v git >/dev/null 2>&1; then
  echo "❌ Git is required but not installed"
  exit 1
fi
'''

# Post-execution hooks
post_recipe = '''
# Clean up temporary files after recipe execution
find . -name "*.tmp" -type f -delete 2>/dev/null || true
'''

# --- Error Handling and Debugging --------------------------------------------
# Configure error handling and debugging features

# Error reporting
set-shell-args := ["-euo", "pipefail"]  # Strict error handling in bash/zsh

# Debugging configuration
[debug]
trace_recipes = false          # Don't trace recipe execution by default
show_environment = false       # Don't show environment variables
log_level = "info"            # Default logging level

# --- Custom Functions and Utilities ------------------------------------------
# Define utility functions for common operations

[functions]
# Function to detect project type
detect_project_type = '''
if [[ -f "Cargo.toml" ]]; then
  echo "rust"
elif [[ -f "package.json" ]]; then
  echo "node"
elif [[ -f "pyproject.toml" ]] || [[ -f "setup.py" ]]; then
  echo "python"
elif [[ -f "flake.nix" ]] || [[ -f "default.nix" ]]; then
  echo "nix"
elif [[ -f "Makefile" ]]; then
  echo "make"
else
  echo "unknown"
fi
'''

# Function to check if in git repository
is_git_repo = '''
git rev-parse --is-inside-work-tree >/dev/null 2>&1
'''

# Function to get current git branch
current_branch = '''
git branch --show-current 2>/dev/null || echo "main"
'''

# --- Documentation and Help --------------------------------------------------
# Configure help and documentation features

[help]
# Help text formatting
show_descriptions = true       # Show recipe descriptions in help
show_variables = true          # Show available variables
show_dependencies = true       # Show recipe dependencies

# Documentation links
project_docs = "README.md"     # Link to project documentation
api_docs = "docs/api.md"       # Link to API documentation
contributing = "CONTRIBUTING.md"  # Link to contributing guidelines