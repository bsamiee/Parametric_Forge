# Title         : broot.hjson
# Author        : Bardia Samiee
# Project       : Parametric Forge
# License       : MIT
# Path          : 01.home/00.core/configs/apps/broot.hjson
# ----------------------------------------------------------------------------
# Broot interactive file tree explorer configuration with custom key bindings,
# themes, and integration with other development tools for enhanced file navigation.

{
    # --- Core Display Settings -----------------------------------------------
    # Configure the basic appearance and behavior of the file tree
    
    show_hidden: false          # Hide dotfiles by default (toggle with 'h')
    show_dates: true           # Show file modification dates
    show_sizes: true           # Show file sizes in human-readable format
    show_git_info: true        # Show git status indicators for files
    show_permissions: false    # Hide permissions by default (toggle with 'perm')
    
    # --- Tree Display Configuration ------------------------------------------
    # Control how the file tree is rendered and navigated
    
    tree_max_depth: 10         # Maximum depth for tree expansion
    tree_max_files_per_dir: 100 # Limit files shown per directory
    cols_order: [              # Column order in tree view
        "mark",                # Selection marks
        "git",                 # Git status indicators  
        "name",                # File/directory names
        "date",                # Modification dates
        "size",                # File sizes
    ]
    
    # --- Search and Navigation Settings ------------------------------------
    # Configure search behavior and navigation patterns
    
    content_search_max_file_size: "10MB"  # Limit for content search
    search_modes: {
        # Configure different search modes
        "name": {
            "default": true    # Name search is default
            "case_sensitive": false
        }
        "content": {
            "case_sensitive": false
            "regex": true      # Enable regex in content search
        }
    }
    
    # --- Integration with External Tools -----------------------------------
    # Configure how broot interacts with other system tools
    
    # Default editor for file editing
    editor: "nvim"             # Use Neovim as default editor
    
    # File associations for different file types
    file_sum_threads_count: 4  # Threads for file size calculation
    
    # --- Color Theme Configuration ------------------------------------------
    # Define colors for different file types and UI elements
    
    skin: {
        # --- Tree Structure Colors ------------------------------------
        tree: "ansi(94)"       # Blue for tree lines
        parent: "ansi(36)"     # Cyan for parent directory
        file: "ansi(37)"       # White for regular files
        directory: "ansi(33) bold"  # Bold yellow for directories
        exe: "ansi(32)"        # Green for executable files
        link: "ansi(35)"       # Magenta for symbolic links
        pruning: "ansi(90)"    # Dark gray for pruned branches
        
        # --- Git Status Colors ----------------------------------------
        git_branch: "ansi(93)" # Bright yellow for git branch
        git_insertions: "ansi(32)"  # Green for git additions
        git_deletions: "ansi(31)"   # Red for git deletions
        git_status_current: "ansi(37)"     # White for current files
        git_status_modified: "ansi(33)"    # Yellow for modified files
        git_status_new: "ansi(32)"         # Green for new files
        git_status_ignored: "ansi(90)"     # Gray for ignored files
        git_status_conflicted: "ansi(31)"  # Red for conflicted files
        
        # --- Selection and Highlighting -------------------------------
        selected_line: "ansi(104)"         # Blue background for selection
        char_match: "ansi(93) underlined"  # Highlighted search matches
        file_error: "ansi(31)"             # Red for file errors
        flag_label: "ansi(36)"             # Cyan for flag labels
        flag_value: "ansi(37)"             # White for flag values
        
        # --- Interface Elements -----------------------------------
        status_error: "ansi(31)"           # Red for error messages
        status_job: "ansi(33)"             # Yellow for background jobs
        status_normal: "ansi(37)"          # White for normal status
        table_border: "ansi(90)"           # Gray for table borders
        title: "ansi(93) bold"             # Bold yellow for titles
        good_to_bad_0: "ansi(32)"          # Green (good)
        good_to_bad_1: "ansi(33)"          # Yellow (medium)
        good_to_bad_2: "ansi(31)"          # Red (bad)
    }
    
    # --- Custom Key Bindings ------------------------------------------------
    # Define custom keyboard shortcuts for enhanced productivity
    
    verbs: [
        # --- Navigation Shortcuts -----------------------------------------
        {
            invocation: "edit"
            key: "F4"
            shortcut: "e"
            execution: "$EDITOR {file}"
            apply_to: "file"
            description: "Edit file with default editor"
        }
        {
            invocation: "create {subpath}"
            key: "F7"
            shortcut: "md"
            execution: "mkdir -p {directory}/{subpath}"
            apply_to: "directory"
            description: "Create new directory"
        }
        {
            invocation: "git_diff"
            key: "ctrl-d"
            shortcut: "gd"
            execution: "git diff {file}"
            apply_to: "file"
            description: "Show git diff for file"
        }
        
        # --- File Operations -------------------------------------------
        {
            invocation: "copy_path"
            key: "alt-c"
            shortcut: "cp"
            execution: "echo {file} | pbcopy"  # macOS clipboard
            apply_to: "file"
            description: "Copy file path to clipboard"
        }
        {
            invocation: "trash"
            key: "delete"
            shortcut: "tr"
            execution: "trash {file}"
            apply_to: "file"
            description: "Move file to trash safely"
        }
        {
            invocation: "duplicate"
            key: "F5"
            shortcut: "dup"
            execution: "cp {file} {file}.copy"
            apply_to: "file"
            description: "Duplicate file with .copy suffix"
        }
        
        # --- Archive Operations ----------------------------------------
        {
            invocation: "compress"
            key: "ctrl-z"
            shortcut: "zip"
            execution: "ouch compress {file} {file}.tar.gz"
            apply_to: "file"
            description: "Compress file/directory with ouch"
        }
        {
            invocation: "extract"
            key: "ctrl-x"
            shortcut: "unzip"
            execution: "ouch decompress {file}"
            apply_to: "file"
            description: "Extract archive with ouch"
        }
        
        # --- Development Tools Integration -----------------------------
        {
            invocation: "code"
            key: "F2"
            shortcut: "code"
            execution: "code {file}"
            apply_to: "file"
            description: "Open file in VS Code"
        }
        {
            invocation: "terminal"
            key: "F3"
            shortcut: "term"
            execution: "wezterm start --cwd {directory}"
            apply_to: "directory"
            description: "Open terminal in directory"
        }
        {
            invocation: "git_log"
            key: "ctrl-l"
            shortcut: "gl"
            execution: "git log --oneline -10 {file}"
            apply_to: "file"
            description: "Show git log for file"
        }
        
        # --- System Integration ----------------------------------------
        {
            invocation: "open"
            key: "F1"
            shortcut: "open"
            execution: "open {file}"  # macOS open command
            apply_to: "file"
            description: "Open file with default application"
        }
        {
            invocation: "finder"
            key: "cmd-f"
            shortcut: "finder"
            execution: "open -R {file}"  # Reveal in Finder (macOS)
            apply_to: "file"
            description: "Reveal file in Finder"
        }
    ]
    
    # --- Search Configuration -----------------------------------------------
    # Configure search behavior and indexing
    
    content_search_max_file_size: "10MB"  # Maximum file size for content search
    search_modes: {
        "name": {
            "default": true
            "case_sensitive": false
        }
        "content": {
            "case_sensitive": false
            "regex": true
        }
    }
    
    # --- Performance Settings -----------------------------------------------
    # Optimize performance for large directories and file operations
    
    file_sum_threads_count: 4     # Threads for calculating directory sizes
    max_panels_count: 2           # Maximum number of panels
    quit_on_last_cancel: true     # Quit when canceling from root
    
    # --- Modal Configuration ------------------------------------------------
    # Configure modal behavior for different interaction modes
    
    modal: true                   # Enable modal interface
    mouse_capture: false          # Disable mouse capture for terminal compatibility
    
    # --- Special File Handling ----------------------------------------------
    # Configure how special files and directories are handled
    
    special_paths: {
        # Hide certain directories from normal navigation
        "/proc": "hide"
        "/sys": "hide"
        "/dev": "hide"
        "node_modules": "hide"
        ".git": "hide"
        "target": "hide"           # Rust build directory
        "__pycache__": "hide"      # Python cache directory
        ".DS_Store": "hide"        # macOS metadata files
    }
    
    # --- Export Configuration -----------------------------------------------
    # Configure data export and integration features
    
    exports: {
        # Export selected files to different formats
        "csv": {
            "separator": ","
            "include_headers": true
        }
        "json": {
            "pretty": true
            "include_metadata": true
        }
    }
}

# Implementation Notes:
# 
# 1. File Deployment:
#    - Deploy to: $XDG_CONFIG_HOME/broot/conf.hjson
#    - Environment variable: BR_INSTALL handled by home-manager
#    - Shell integration: 'br' command for cd functionality
# 
# 2. Platform Considerations:
#    - macOS: Uses 'open', 'pbcopy', Finder integration
#    - Linux: Would use 'xdg-open', 'xclip', file manager integration
#    - Terminal: Optimized for modern terminal emulators with color support
# 
# 3. Integration Requirements:
#    - Requires: ouch (archive tool), trash-cli, git, editor (nvim/code)
#    - Optional: wezterm (terminal), VS Code, system file manager
#    - Shell: Automatic integration via home-manager programs.broot
# 
# 4. Performance Optimization:
#    - Thread count optimized for modern multi-core systems
#    - File size limits prevent performance issues with large files
#    - Special path hiding reduces clutter and improves navigation
# 
# 5. Customization:
#    - Color scheme optimized for dark terminals
#    - Key bindings follow common conventions (F-keys, Ctrl combinations)
#    - File operations integrate with modern CLI tools
# 
# 6. Future Enhancements:
#    - TODO: Add more language-specific file type recognition
#    - TODO: Integrate with more development tools (Docker, Kubernetes)
#    - TODO: Add custom preview scripts for different file types
#    - TODO: Consider adding plugin system integration