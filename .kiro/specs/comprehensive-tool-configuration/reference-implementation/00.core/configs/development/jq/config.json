{
  "_comment": "Title: config.json",
  "_author": "Bardia Samiee",
  "_project": "Parametric Forge",
  "_license": "MIT",
  "_path": "01.home/00.core/configs/development/jq/config.json",
  "_description": "jq JSON processor configuration with custom functions and settings",
  
  "_section_comment": "--- Core Settings ---",
  "indent": 2,
  "tab": false,
  "sort_keys": false,
  "compact_output": false,
  "raw_output": false,
  "null_input": false,
  
  "_section_comment": "--- Output Formatting ---",
  "color_output": "auto",
  "ascii_output": false,
  "join_output": false,
  "raw_input": false,
  
  "_section_comment": "--- Error Handling ---",
  "exit_status": true,
  "stream": false,
  "seq": false,
  
  "_section_comment": "--- Custom Functions ---",
  "custom_functions": {
    "_comment": "Custom jq functions for common operations",
    
    "flatten_deep": "def flatten_deep: if type == \"array\" then map(flatten_deep) | add else . end;",
    
    "unique_by_key": "def unique_by_key(key): group_by(key) | map(.[0]);",
    
    "safe_get": "def safe_get(path): try (getpath(path)) catch null;",
    
    "deep_merge": "def deep_merge(other): . as $item | other | to_entries | reduce .[] as $entry ($item; if ($entry.value | type) == \"object\" and (.[$entry.key] | type) == \"object\" then .[$entry.key] = (.[$entry.key] | deep_merge($entry.value)) else .[$entry.key] = $entry.value end);",
    
    "filter_empty": "def filter_empty: if type == \"object\" then with_entries(select(.value != null and .value != \"\" and .value != [])) elif type == \"array\" then map(select(. != null and . != \"\" and . != [])) else . end;",
    
    "to_csv": "def to_csv: if type == \"array\" and length > 0 then (.[0] | keys_unsorted) as $headers | [$headers] + map([.[$headers[]]]) | map(@csv) | join(\"\\n\") else empty end;",
    
    "from_csv": "def from_csv: split(\"\\n\") | map(split(\",\")) | .[0] as $headers | .[1:] | map(. as $row | reduce range(0; $headers|length) as $i ({}; .[$headers[$i]] = $row[$i]));",
    
    "timestamp_to_date": "def timestamp_to_date: if type == \"number\" then strftime(\"%Y-%m-%d %H:%M:%S\") else . end;",
    
    "date_to_timestamp": "def date_to_timestamp: if type == \"string\" then strptime(\"%Y-%m-%d %H:%M:%S\") | mktime else . end;",
    
    "slugify": "def slugify: ascii_downcase | gsub(\"[^a-z0-9]+\"; \"-\") | gsub(\"^-+|-+$\"; \"\");"
  }
}