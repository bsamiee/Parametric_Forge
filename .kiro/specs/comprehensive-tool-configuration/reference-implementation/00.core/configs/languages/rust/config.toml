# Title         : config.toml
# Author        : Bardia Samiee
# Project       : Parametric Forge
# License       : MIT
# Path          : 01.home/00.core/configs/languages/rust/config.toml
# ----------------------------------------------------------------------------
# Rust toolchain configuration with Cargo settings and development optimizations

# --- Cargo Configuration ----------------------------------------------------
[cargo]
# Default registry for crates
default-registry = "crates-io"

# Offline mode (use only cached crates)
offline = false

# Network timeout in seconds
http-timeout = 30

# HTTP multiplexing
http-multiplexing = true

# HTTP user agent
http-user-agent = "cargo/1.0 (Parametric Forge)"

# Check for updates
http-check-revoke = true

# --- Build Configuration ---------------------------------------------------
[build]
# Number of parallel jobs (0 = number of CPUs)
jobs = 0

# Default target triple
# target = "x86_64-unknown-linux-gnu"

# Target directory for build artifacts
target-dir = "target"

# Incremental compilation
incremental = true

# Dependency information format
dep-info-basedir = "."

# --- Compilation Settings --------------------------------------------------
[profile.dev]
# Optimization level (0-3, s, z)
opt-level = 0

# Debug information (0, 1, 2, true, false)
debug = true

# Runtime checks
debug-assertions = true
overflow-checks = true

# Link-time optimization
lto = false

# Panic strategy (unwind, abort)
panic = "unwind"

# Code generation units
codegen-units = 256

# Incremental compilation
incremental = true

[profile.release]
# Optimization level
opt-level = 3

# Debug information
debug = false

# Runtime checks
debug-assertions = false
overflow-checks = false

# Link-time optimization
lto = true

# Panic strategy
panic = "abort"

# Code generation units
codegen-units = 1

# Incremental compilation
incremental = false

[profile.test]
# Inherit from dev profile
inherits = "dev"

[profile.bench]
# Inherit from release profile
inherits = "release"

# Debug information for benchmarks
debug = true

# --- Registry Configuration -------------------------------------------------
[registries]
# Alternative registries
# my-registry = { index = "https://my-intranet:8080/git/index" }

[registries.crates-io]
protocol = "sparse"

# --- Source Replacement ----------------------------------------------------
[source]
# Replace crates.io with a mirror
# [source.crates-io]
# replace-with = "my-mirror"

# [source.my-mirror]
# registry = "https://my-mirror.com/index"

# Local registry for offline development
# [source.local-registry]
# local-registry = "/path/to/local/registry"

# Git source replacement
# [source."https://github.com/rust-lang/crates.io-index"]
# replace-with = "my-mirror"

# --- Network Configuration --------------------------------------------------
[net]
# Retry attempts for network operations
retry = 3

# Git fetch with CLI instead of libgit2
git-fetch-with-cli = false

# Offline mode
offline = false

# --- HTTP Configuration ----------------------------------------------------
[http]
# HTTP proxy
# proxy = "http://proxy.example.com:8080"

# HTTP timeout
timeout = 30

# Low speed limit (bytes per second)
low-speed-limit = 10

# Multiplexing
multiplexing = true

# SSL verification
ssl-version = "tlsv1.2"

# CA bundle
# cainfo = "/path/to/ca-bundle.crt"

# Check certificate revocation
check-revoke = true

# User agent
user-agent = "cargo/1.0 (Parametric Forge)"

# --- Future Incompatible Warnings ------------------------------------------
[future-incompat-report]
frequency = "always"

# --- Term Configuration ----------------------------------------------------
[term]
# Terminal width
# width = 80

# Verbose output
verbose = false

# Colored output
color = "auto"

# Progress bar
progress.when = "auto"
progress.width = 80

# --- Install Configuration -------------------------------------------------
[install]
# Root directory for installed binaries
root = "$CARGO_HOME/bin"

# --- Patch Configuration ---------------------------------------------------
# Patch dependencies for development
# [patch.crates-io]
# my-crate = { path = "../my-crate" }

# [patch."https://github.com/example/repo"]
# my-crate = { path = "../my-crate" }

# --- Workspace Configuration -----------------------------------------------
# Workspace-specific settings would go in workspace Cargo.toml

# --- Environment Variables -------------------------------------------------
[env]
# Custom environment variables for builds
# RUST_LOG = "debug"
# RUST_BACKTRACE = "1"

# --- Alias Configuration ---------------------------------------------------
[alias]
# Custom cargo commands
b = "build"
c = "check"
t = "test"
r = "run"
br = "build --release"
tr = "test --release"
rr = "run --release"

# Development aliases
dev = "run --bin"
watch = "watch -x check"
fmt-check = "fmt -- --check"
clippy-all = "clippy --all-targets --all-features"

# Benchmarking
bench-all = "bench --all"
criterion = "bench --bench"

# Documentation
doc-open = "doc --open"
doc-all = "doc --all --no-deps"

# Cleaning
clean-all = "clean --release"
clean-deps = "clean -p"

# Publishing
publish-dry = "publish --dry-run"
package-list = "package --list"

# Auditing
audit-fix = "audit fix"
outdated = "outdated -R"

# --- Unstable Features -----------------------------------------------------
[unstable]
# Enable unstable features (nightly only)
# build-std = ["std", "panic_abort"]
# build-std-features = ["panic_immediate_abort"]
# timings = ["html", "json"]
# doctest-xcompile = true
# multitarget = true

# --- Target-Specific Configuration -----------------------------------------
# Configuration for specific targets

[target.'cfg(unix)']
# Unix-specific settings
# linker = "clang"
# rustflags = ["-C", "link-arg=-fuse-ld=lld"]

[target.'cfg(windows)']
# Windows-specific settings
# linker = "link.exe"

[target.x86_64-unknown-linux-gnu]
# Linux x86_64 specific settings
# linker = "clang"
# rustflags = ["-C", "target-cpu=native"]

[target.aarch64-apple-darwin]
# Apple Silicon specific settings
# rustflags = ["-C", "target-cpu=native"]

# --- Linting Configuration -------------------------------------------------
# Clippy configuration (also in clippy.toml)
[lints.rust]
unsafe_code = "forbid"
missing_docs = "warn"
unused_imports = "warn"
dead_code = "warn"

[lints.clippy]
all = "warn"
pedantic = "warn"
nursery = "warn"
cargo = "warn"

# Allow some pedantic lints
module_name_repetitions = "allow"
similar_names = "allow"
too_many_lines = "allow"

# --- Documentation Configuration -------------------------------------------
[doc]
# Browser to open documentation
# browser = ["firefox", "--new-tab"]

# --- Credential Configuration ----------------------------------------------
[credentials]
# Credentials for registries (use cargo login instead)

# --- Custom Tools Configuration --------------------------------------------
# Configuration for additional Rust tools

# Rustfmt configuration (also in rustfmt.toml)
[fmt]
edition = "2021"
hard_tabs = false
tab_spaces = 4
newline_style = "Unix"
use_small_heuristics = "Default"

# Miri configuration
[miri]
# Miri flags for unsafe code testing
# flags = ["-Zmiri-disable-isolation"]

# --- Development Environment -----------------------------------------------
# Development-specific settings

# Faster linking for development
[profile.dev.package."*"]
opt-level = 1

# Faster builds for dependencies
[profile.dev.build-override]
opt-level = 3

# --- Platform-Specific Optimizations --------------------------------------
# Optimizations for different platforms

# macOS optimizations
[target.'cfg(target_os = "macos")']
rustflags = [
  "-C", "target-cpu=native",
  "-C", "link-arg=-Wl,-dead_strip"
]

# Linux optimizations
[target.'cfg(target_os = "linux")']
rustflags = [
  "-C", "target-cpu=native",
  "-C", "link-arg=-Wl,--gc-sections"
]

# Windows optimizations
[target.'cfg(target_os = "windows")']
rustflags = [
  "-C", "target-cpu=native"
]