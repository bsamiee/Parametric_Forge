# Title         : ruff.toml
# Author        : Bardia Samiee
# Project       : Parametric Forge
# License       : MIT
# Path          : /01.home/00.core/configs/languages/ruff.toml
# ----------------------------------------------------------------------------
# Python linter and formatter configuration with Google docstrings

# --- Core Settings ------------------------------------------------------------
line-length = 120
target-version = "py313"
preview = true
cache-dir = "$RUFF_CACHE_DIR"
src = ["."]
respect-gitignore = true
show-fixes = true

exclude = [
  ".git",
  ".venv",
  ".cache",
  "node_modules",
  "__pycache__",
  ".mypy_cache",
  ".pytest_cache",
  ".ruff_cache",
  "dist",
  "build",
]

# --- Formatting Options -------------------------------------------------------
[format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
skip-magic-trailing-comma = false
line-ending = "lf"

# --- Linting Rules ------------------------------------------------------------
[lint]
extend-select = [
  "A",     # flake8-builtins
  "AIR",   # Airflow
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "COM",   # flake8-commas
  "D",     # pydocstyle
  "DTZ",   # flake8-datetimez
  "E",     # pycodestyle errors
  "EM",    # flake8-errmsg
  "ERA",   # eradicate
  "EXE",   # flake8-executable
  "F",     # Pyflakes
  "FA",    # flake8-future-annotations
  "FAST",  # FastAPI
  "FBT",   # flake8-boolean-trap
  "FLY",   # flynt
  "FURB",  # refurb
  "G",     # flake8-logging-format
  "I",     # isort
  "ICN",   # flake8-import-conventions
  "INT",   # flake8-gettext
  "ISC",   # flake8-implicit-str-concat
  "LOG",   # flake8-logging
  "N",     # pep8-naming
  "PERF",  # Perflint
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PL",    # Pylint
  "PLC",   # Pylint: Convention
  "PLE",   # Pylint: Error
  "PLR",   # Pylint: Refactor
  "PLW",   # Pylint: Warning
  "PT",    # flake8-pytest-style
  "PTH",   # flake8-use-pathlib
  "PYI",   # flake8-pyi
  "Q",     # flake8-quotes
  "RET",   # flake8-return
  "RUF",   # Ruff-specific rules
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  "T20",   # flake8-print
  "TC",    # flake8-type-checking
  "TD",    # flake8-todos
  "TID",   # flake8-tidy-imports
  "TRY",   # tryceratops
  "UP",    # pyupgrade
  "W",     # pycodestyle warnings
  "DOC",   # pydoclint
]

extend-ignore = [
  "COM812",  # Conflicts with formatter
  "E701",    # Allow inline code for match statements
  "D203",    # one-blank-line-before-class
  "D205",    # blank line required between summary and description
  "D212",    # multi-line-summary-first-line
  "D400",    # First line should end with a period
  "D401",    # First line should be in imperative mood
  "D405",    # Section name should be properly capitalized
  "D406",    # Section name should end with a newline
  "D407",    # Missing dashed underline after section
  "D408",    # Section underline should be in the line following the section's name
  "D409",    # Section underline should match the length of its name
  "D410",    # Missing blank line after section
  "D411",    # Missing blank line before section
  "D413",    # Missing blank line after last section
  "D414",    # Section has no content
  "D415",    # First line should end with a period, question mark, or exclamation point
  "D416",    # Section name should end with a colon
  "DOC201",  # Don't require Returns section in docstrings
  "DOC501",  # Don't require exception documentation in docstrings
  "FBT001",  # Boolean positional arg in function definition
  "PLC2701", # Ignore private import usage in your own project
  "PYI001",  # TypeVar names should be prefixed with `_`
  "PYI010",  # Don't remove __str__ from stub files
  "PYI011",  # Don't flag typed self in stub files
  "RUF029",  # Function is declared async but doesn't use await
  "ARG001",  # Unused function argument
]

fixable = ["ALL"]
unfixable = []

# --- Per-file Ignores ---------------------------------------------------------
[lint.per-file-ignores]
"**/__init__.py" = [
  "F401",    # imported but unused (we re-export in __init__.py)
  "PLC0414", # import alias does not rename (x as x pattern for re-exports)
  "RUF022",  # unsorted __all__ (we want logical grouping, not alphabetical)
  "RUF100",  # unused noqa directives (sometimes needed for re-exports)
  "TC004",   # move import out of type-checking block (we want TYPE_CHECKING for re-exports)
  "I001",    # import block is un-sorted (we use logical grouping with section comments)
  "E402",    # module level import not at top of file (we use imports in __getattr__)
  "PLC0415", # import outside top-level (needed for lazy loading in __getattr__)
  "ANN401",  # dynamically typed expressions (Any) - needed for __getattr__
  "TRY003",  # avoid long messages outside exception class (standard __getattr__ pattern)
  "EM102",   # exception must not use f-string literal (standard __getattr__ pattern)
]
"tests/*" = [
  "S101",    # assert usage
  "D",       # docstring requirements
  "ANN",     # missing type annotations
  "PLR2004", # magic value in comparison
  "ARG002",  # unused arguments (fixtures)
  "PLR6301", # methods that could be static/functions
  "PLC0415", # import within function
  "PT023",   # use parentheses on fixtures/marks
  "PT006",   # wrong parametrize tuple type
]
"01.home/00.core/configs/apps/claude/hooks/*.py" = ["S603", "S607"]  # Allow subprocess for hooks

# --- Import Organization -----------------------------------------------------
[lint.isort]
combine-as-imports = true
force-single-line = false
lines-after-imports = 2
# known-first-party set per-project

# --- Docstring Style ---------------------------------------------------------
[lint.pydocstyle]
convention = "google"

# --- Type Annotation Settings ------------------------------------------------
[lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-none-returning = true

# --- Pytest Style Settings ---------------------------------------------------
[lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

# --- Pylint Settings ---------------------------------------------------------
[lint.pylint]
allow-magic-value-types = ["int", "str", "bytes"]

# --- Pydoclint Settings ------------------------------------------------------
[lint.pydoclint]
ignore-one-line-docstrings = true
