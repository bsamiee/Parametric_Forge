#!/usr/bin/env sh
# Title         : yabairc
# Author        : Bardia Samiee
# Project       : Parametric Forge
# License       : MIT
# Path          : /01.home/00.core/configs/apps/yabai/yabairc
# ----------------------------------------------------------------------------
# Clean yabai window manager configuration

set -eu

# --- preflight --------------------------------------------------------------
command -v yabai >/dev/null 2>&1 || {
  echo "ERROR: yabai not found in PATH" >&2
  exit 1
}

# --- paths & tools ----------------------------------------------------------
find_bin() {
  name="$1"
  cand=""
  if command -v "$name" >/dev/null 2>&1; then
    cand="$(command -v "$name")"
  fi
  if [ -n "$cand" ] && [ -x "$cand" ]; then
    echo "$cand"
    return 0
  fi
  for cand in "/run/current-system/sw/bin/$name" "/opt/homebrew/bin/$name" "/usr/local/bin/$name"; do
    [ -x "$cand" ] && {
      echo "$cand"
      return 0
    }
  done
  echo "$name"
}

YABAI_BIN="$(find_bin yabai)"
# shellcheck disable=SC2034  # Used by sourced modules
JQ_BIN="$(find_bin jq)"

# For scripting-addition, prefer Homebrew path to match sudoers
if [ -x "/opt/homebrew/bin/yabai" ]; then
  YABAI_SA_BIN="/opt/homebrew/bin/yabai"
else
  YABAI_SA_BIN="$YABAI_BIN"
fi

# timeout/gtimeout for robust SA load
if command -v timeout >/dev/null 2>&1; then
  TIMEOUT_BIN="$(command -v timeout)"
elif command -v gtimeout >/dev/null 2>&1; then
  TIMEOUT_BIN="$(command -v gtimeout)"
else
  TIMEOUT_BIN=""
fi

# --- anchors: load ----------------------------------------------------------
# Source anchor presets so variables like $GRID_RIGHT_HALF are available.
# Try common locations, including alongside this file.
ANCHORS_LOADED=0
_YABRC_DIR_CAND="$(dirname "$0" 2>/dev/null || printf .)"
for _cand in \
  "$_YABRC_DIR_CAND/grid-anchors.sh" \
  "$HOME/.config/yabai/grid-anchors.sh" \
  "$HOME/01.home/00.core/configs/apps/yabai/grid-anchors.sh" \
  "01.home/00.core/configs/apps/yabai/grid-anchors.sh"; do
  if [ -r "$_cand" ]; then
    # shellcheck source=/dev/null
    . "$_cand"
    ANCHORS_LOADED=1
    break
  fi
done
[ "$ANCHORS_LOADED" = 1 ] || echo "yabai: grid-anchors.sh not found; grid variables unavailable" >&2

# --- scripting addition -----------------------------------------------------
SA_LOADED=false
if [ -n "$TIMEOUT_BIN" ]; then
  if "$TIMEOUT_BIN" 10s sudo "$YABAI_SA_BIN" --load-sa 2>/dev/null; then
    SA_LOADED=true
  fi
else
  if sudo "$YABAI_SA_BIN" --load-sa 2>/dev/null; then
    SA_LOADED=true
  fi
fi

if [ "$SA_LOADED" = true ]; then
  # ensure Dock restart reloads SA
  "$YABAI_BIN" -m signal --remove reload_sa >/dev/null 2>&1 || true
  "$YABAI_BIN" -m signal --add event=dock_did_restart action="sudo $YABAI_SA_BIN --load-sa" label=reload_sa
else
  echo "yabai: scripting-addition not loaded; advanced features disabled" >&2
fi

# --- config: core -----------------------------------------------------------
# enable with: YABAI_DEBUG=1 yabai --start-service
if [ "${YABAI_DEBUG:-0}" = "1" ]; then
  "$YABAI_BIN" -m config debug_output on
else
  "$YABAI_BIN" -m config debug_output off
fi

# insertion/origin policies
"$YABAI_BIN" -m config window_insertion_point focused \
  window_origin_display cursor

# --- config: layout & spacing ----------------------------------------------
"$YABAI_BIN" -m config layout bsp \
  split_ratio 0.50 \
  auto_balance on \
  top_padding 4 \
  bottom_padding 4 \
  left_padding 4 \
  right_padding 4 \
  window_gap 4

# integrate with any external bar or to ensure grid-placed windows respect top/bottom padding
# reserve the same top/bottom as our default padding (4)
"$YABAI_BIN" -m config external_bar all:4:4 \
  menubar_opacity 1.0

# --- config: appearance -----------------------------------------------------
if [ "$SA_LOADED" = true ]; then
  "$YABAI_BIN" -m config window_opacity on \
    active_window_opacity 0.95 \
    normal_window_opacity 0.80 \
    window_opacity_duration 0.25 \
    window_shadow on \
    window_animation_duration 0.0
else
  # Avoid setting SA-required options when scripting-addition is not available
  # window_opacity/window_shadow/window_animation_duration require SIP partial
  # and/or screen recording; skip to prevent noisy errors.
  true
fi

  "$YABAI_BIN" -m config insert_feedback_color 0xff50fa7b \
  window_zoom_persist on

# --- config: mouse ----------------------------------------------------------
"$YABAI_BIN" -m config focus_follows_mouse off \
  mouse_follows_focus off \
  mouse_modifier alt \
  mouse_action1 move \
  mouse_action2 resize \
  mouse_drop_action swap

# --- module: rules & signals load -----------------------------------------
# Source rules & signals module after core config and anchors are loaded
RULES_LOADED=0
_YABRC_DIR_CAND="$(dirname "$0" 2>/dev/null || printf .)"
for _cand in \
  "$_YABRC_DIR_CAND/rules-signals.sh" \
  "$HOME/.config/yabai/rules-signals.sh" \
  "$HOME/01.home/00.core/configs/apps/yabai/rules-signals.sh" \
  "01.home/00.core/configs/apps/yabai/rules-signals.sh"; do
  if [ -r "$_cand" ]; then
    # shellcheck source=/dev/null
    . "$_cand"
    RULES_LOADED=1
    break
  fi
done
[ "$RULES_LOADED" = 1 ] || echo "yabai: rules-signals.sh not found; skipping rules/signals" >&2

# --- external borders: managed by yabai ------------------------------------
# Use ~/.config/borders/bordersrc as the single source of truth.
# Start once after core config and ensure reload on Dock restart.
BORDERS_RC="${XDG_CONFIG_HOME:-$HOME/.config}/borders/bordersrc"
if [ -x "$BORDERS_RC" ]; then
  # stop existing instance, then start fresh in background
  pkill -x borders >/dev/null 2>&1 || true
  PATH="/opt/homebrew/bin:/usr/local/bin:/run/current-system/sw/bin:$PATH" "$BORDERS_RC" >/dev/null 2>&1 &
  # ensure Dock restart also restarts borders
  "$YABAI_BIN" -m signal --remove restart_borders >/dev/null 2>&1 || true
  "$YABAI_BIN" -m signal --add event=dock_did_restart \
    action="pkill -x borders >/dev/null 2>&1 || true; PATH='/opt/homebrew/bin:/usr/local/bin:/run/current-system/sw/bin:'\$PATH '$BORDERS_RC' >/dev/null 2>&1 &" \
    label=restart_borders
else
  echo "yabai: bordersrc not found or not executable: $BORDERS_RC" >&2
fi

# --- startup: diagnostics ---------------------------------------------------
if "$YABAI_BIN" -m query --windows >/dev/null 2>&1; then
  # skhd status hint
  if pgrep -x skhd >/dev/null 2>&1; then
    echo "yabai: skhd active"
  else
    echo "yabai: skhd not running" >&2
  fi
  if [ "$SA_LOADED" = true ]; then
    "$YABAI_BIN" -m config window_opacity_duration 0.25
  fi
  echo "yabai: ready"
else
  echo "yabai: configuration validation failed" >&2
fi
