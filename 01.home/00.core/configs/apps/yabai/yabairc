#!/bin/bash
# Title         : yabairc
# Author        : Bardia Samiee
# Project       : Parametric Forge
# License       : MIT
# Path          : /01.home/00.core/configs/apps/yabairc
# ----------------------------------------------------------------------------
# Clean yabai window manager configuration

set -euo pipefail

if ! command -v yabai >/dev/null 2>&1; then
    echo "ERROR: yabai not found in PATH" >&2
    exit 1
fi

echo "yabai: Starting configuration..."

# --- Check Companion Tools --------------------------------------------------
echo "yabai: Checking for companion UI tools..."

# Check if SketchyBar is available (don't start it)
if command -v sketchybar >/dev/null 2>&1; then
  if pgrep -x sketchybar >/dev/null && sketchybar --query bar >/dev/null 2>&1; then
    echo "yabai: ✓ SketchyBar detected and running"
    SKETCHYBAR_READY=true
  else
    echo "yabai: ○ SketchyBar available but not running - will start independently"
    SKETCHYBAR_READY=false
  fi
else
  echo "yabai: ! SketchyBar not found in PATH" >&2
  SKETCHYBAR_READY=false
fi

# Check skhd status (managed independently via launchd)
if command -v skhd >/dev/null 2>&1; then
  if pgrep -x skhd >/dev/null; then
    SKHD_PID=$(pgrep -x skhd)
    echo "yabai: ✓ skhd already running (PID: $SKHD_PID)"
  else
    echo "yabai: ○ skhd not running - should be managed by launchd service" >&2
    SKHD_PID="none"
  fi
else
  echo "yabai: ! skhd not found in PATH" >&2
  if command -v brew >/dev/null 2>&1 && brew list skhd >/dev/null 2>&1; then
    echo "yabai: ! skhd installed but not linked - run: brew unlink skhd && brew link skhd" >&2
  else
    echo "yabai: ! skhd not installed - run: brew install koekeishiya/formulae/skhd" >&2
  fi
  SKHD_PID="none"
fi

# Start borders
borders &
BORDERS_PID=$!
sleep 0.3
if pgrep -f borders >/dev/null; then
  echo "yabai: ✓ borders ready (PID: $BORDERS_PID)"
else
  echo "yabai: ! borders failed to start" >&2
fi

echo "yabai: ✓ UI tools checked (skhd=$SKHD_PID borders=$BORDERS_PID sketchybar=${SKETCHYBAR_READY:-false})"

# --- Scripting Addition with Detailed Diagnostics --------------------------
echo "yabai: Loading scripting addition..."
SA_LOADED=false
if [ -f "/Library/ScriptingAdditions/yabai.osax/Contents/Info.plist" ]; then
    echo "yabai: ✓ Scripting addition found at /Library/ScriptingAdditions/"
    if sudo --non-interactive yabai --load-sa 2>/dev/null; then
        echo "yabai: ✓ Scripting addition loaded - full feature set available"
        yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
        SA_LOADED=true
    else
        echo "yabai: ! Scripting addition failed to load - check sudoers configuration" >&2
        echo "yabai: ! Run: sudo yabai --install-sa" >&2
        echo "yabai: ! Advanced features (opacity, space creation, sub-layers) disabled" >&2
    fi
else
    echo "yabai: ! Scripting addition not installed" >&2
    echo "yabai: ! Run: sudo yabai --install-sa" >&2
    echo "yabai: ! Advanced features (opacity, space creation, sub-layers) disabled" >&2
fi

# YABAI_CONFIG_DIR="$HOME/.config/yabai"  # Removed - no longer needed

# --- Event Signals ----------------------------------------------------------
# SketchyBar integration - only if SketchyBar is ready
if [ "${SKETCHYBAR_READY:-false}" = true ]; then
  echo "yabai: Configuring SketchyBar event integration..."
  yabai -m signal --add event=space_created action="yabai -m space --layout bsp; sketchybar --trigger space_change"
  yabai -m signal --add event=space_destroyed action="sketchybar --trigger space_change"
  yabai -m signal --add event=space_changed action="sketchybar --trigger space_change"
  yabai -m signal --add event=display_added action="sketchybar --trigger space_change"
  yabai -m signal --add event=display_removed action="sketchybar --trigger space_change"

  # Conditional opacity effects - only if scripting addition loaded
  if [ "$SA_LOADED" = true ]; then
    yabai -m signal --add event=window_focused action="yabai -m window --opacity 0.5 && sleep 0.1 && yabai -m window --opacity 0.95; sketchybar --trigger window_focus"
  else
    yabai -m signal --add event=window_focused action="sketchybar --trigger window_focus"
  fi
  yabai -m signal --add event=window_created action="sketchybar --trigger windows_on_spaces"
  yabai -m signal --add event=window_destroyed action="sketchybar --trigger windows_on_spaces"
  yabai -m signal --add event=window_moved action="sketchybar --trigger windows_on_spaces"
  echo "yabai: SketchyBar event signals configured"
else
  echo "yabai: SketchyBar not ready - skipping event integration" >&2
fi

# --- Smart Window Management Signals ----------------------------------------
# Filter approach: Only float genuinely non-interactive windows
yabai -m signal --add event=window_created action="
  info=\$(yabai -m query --windows --window \$YABAI_WINDOW_ID)
  is_floating=\$(echo \"\$info\" | jq -r '.\"is-floating\"')
  can_resize=\$(echo \"\$info\" | jq -r '.\"can-resize\"')
  can_move=\$(echo \"\$info\" | jq -r '.\"can-move\"')

  # Trust yabai's default management decision
  [ \"\$is_floating\" = 'false' ] && exit 0

  # Skip windows with normal interaction capabilities
  [ \"\$can_resize\" = 'true' ] && [ \"\$can_move\" = 'true' ] && exit 0

  # Float truly non-interactive windows only
  [ \"\$can_resize\" = 'false' ] && [ \"\$can_move\" = 'false' ] && yabai -m window \$YABAI_WINDOW_ID --toggle float
"

# --- Core Configuration -----------------------------------------------------
yabai -m config debug_output on

# --- Layout & Spacing -------------------------------------------------------
yabai -m config layout bsp                      \
                window_placement second_child   \
                split_ratio 0.50                \
                auto_balance on

yabai -m config top_padding 4       \
                bottom_padding 4    \
                left_padding 4      \
                right_padding 4     \
                window_gap 4

# --- External Bar Integration -----------------------------------------------
yabai -m config external_bar all:48:0 \
                menubar_opacity 1.0

# --- Initialize Spaces ------------------------------------------------------
SPACE_DATA=$(yabai -m query --spaces)
SPACE_COUNT=$(echo "$SPACE_DATA" | jq length)

while read -r space; do
    yabai -m space "$space" --layout bsp 2>/dev/null || true
done < <(echo "$SPACE_DATA" | jq -r '.[].index')

echo "yabai: ✓ Configured $SPACE_COUNT spaces"

# --- Sync SketchyBar --------------------------------------------------------
if [ "${SKETCHYBAR_READY:-false}" = true ]; then
  sketchybar --trigger space_change
  echo "yabai: Initial SketchyBar sync completed"
fi

# --- Window Behavior & Appearance (Conditional) ----------------------------
# Only enable advanced features if scripting addition is loaded
if [ "$SA_LOADED" = true ]; then
  yabai -m config window_opacity on                   \
                  window_opacity_duration 0.25        \
                  active_window_opacity 0.95          \
                  normal_window_opacity 0.80          \
                  window_shadow float                 \
                  window_animation_duration 0.0
else
  yabai -m config window_opacity off                  \
                  window_shadow on                    \
                  window_animation_duration 0.0
fi

yabai -m config insert_feedback_color 0xff50fa7b    \
                window_zoom_persist on              \
                window_origin_display default

yabai -m config focus_follows_mouse off \
                mouse_follows_focus off \
                mouse_modifier alt      \
                mouse_action1 move      \
                mouse_action2 resize    \
                mouse_drop_action swap

# --- Application Rules ------------------------------------------------------
# System Applications - Core macOS components with centered positioning
yabai -m rule --add app="^System Settings$" manage=off sub-layer=below grid=10:10:2:2:6:6
yabai -m rule --add app="^System Preferences$" manage=off sub-layer=below grid=10:10:2:2:6:6
yabai -m rule --add app="^System Information$" manage=off sub-layer=below grid=10:10:2:2:6:6
yabai -m rule --add app="^Activity Monitor$" manage=off sub-layer=below grid=10:10:2:1:6:8
yabai -m rule --add app="^Archive Utility$" manage=off sub-layer=below grid=10:10:3:3:4:4
yabai -m rule --add app="^Installer$" manage=off sub-layer=below grid=10:10:2:2:6:6
yabai -m rule --add app="^Software Update$" manage=off sub-layer=below grid=10:10:3:3:4:4
yabai -m rule --add app="^Finder$" manage=off sub-layer=below grid=10:10:1:1:8:8
yabai -m rule --add app="^Migration Assistant$" manage=off sub-layer=below grid=10:10:2:2:6:6
yabai -m rule --add app="^Disk Utility$" manage=off sub-layer=below grid=10:10:2:2:6:6

# Utilities - Small tools with consistent grid positioning
yabai -m rule --add app="^Calculator$" manage=off sub-layer=below grid=10:10:7:1:3:4
yabai -m rule --add app="^Dictionary$" manage=off sub-layer=below grid=10:10:2:2:6:6
yabai -m rule --add app="^Karabiner-Elements$" manage=off sub-layer=below grid=10:10:1:1:8:8
yabai -m rule --add app="^QuickTime Player$" manage=off sub-layer=below grid=10:10:2:2:6:6
yabai -m rule --add app="^Preview$" manage=off sub-layer=below grid=10:10:1:1:8:8
yabai -m rule --add app="^1Password$" manage=off sub-layer=above sticky=on grid=10:10:3:3:4:4
yabai -m rule --add app="^Digital Colormeter$" manage=off sub-layer=below grid=10:10:6:2:4:3
yabai -m rule --add app="^ColorSync Utility$" manage=off sub-layer=below grid=10:10:3:3:4:4
yabai -m rule --add app="^Font File Browser$" manage=off sub-layer=below grid=10:10:2:2:6:6

# Modern productivity tools with smart positioning
yabai -m rule --add app="^Raycast$" manage=off sub-layer=below grid=10:10:3:1:4:6
yabai -m rule --add app="^CleanShot X$" manage=off sub-layer=above
yabai -m rule --add app="^AirBuddy$" manage=off sub-layer=below grid=10:10:7:7:3:2
yabai -m rule --add app="^AlDente$" manage=off sub-layer=below grid=10:10:7:7:3:2
yabai -m rule --add app="^BetterMouse$" manage=off sub-layer=below grid=10:10:2:2:6:6
yabai -m rule --add app="^BetterTouchTool$" manage=off sub-layer=below grid=10:10:1:1:8:8
yabai -m rule --add app="^Docker Desktop$" manage=off sub-layer=below grid=10:10:1:1:8:8
yabai -m rule --add app="^Hammerspoon$" manage=off sub-layer=below grid=10:10:2:2:6:6

# Communication & Media Apps with consistent side positioning
yabai -m rule --add app="^Discord$" manage=off sub-layer=below grid=10:10:6:0:4:10
yabai -m rule --add app="^Messages$" manage=off sub-layer=below grid=10:10:5:0:5:10
yabai -m rule --add app="^Telegram$" manage=off sub-layer=below grid=10:10:7:2:3:6
yabai -m rule --add app="^WhatsApp$" manage=off sub-layer=below grid=10:10:7:2:3:6
yabai -m rule --add app="^zoom.us$" manage=off sub-layer=below grid=10:10:2:2:6:6
yabai -m rule --add app="^Spotify$" manage=off sub-layer=below grid=10:10:2:7:6:3

# Creative & Design Apps
yabai -m rule --add app="^Blender$" manage=off sub-layer=below
yabai -m rule --add app="^Adobe Photoshop 2025$" manage=off sub-layer=below grid=10:10:0:0:10:10
yabai -m rule --add app="^Adobe Illustrator 2025$" manage=off sub-layer=below grid=10:10:0:0:10:10
yabai -m rule --add app="^Adobe After Effects 2025$" manage=off sub-layer=below grid=10:10:0:0:10:10

# Development Tools
yabai -m rule --add app="^Console$" manage=off sub-layer=below
yabai -m rule --add app="^WezTerm$" manage=on
yabai -m rule --add app="^Visual Studio Code$" manage=on
yabai -m rule --add app="^Adobe Creative Cloud$" manage=off sub-layer=below grid=10:10:1:1:8:8

# Essential Universal Rules - Minimal PIP fixes only
yabai -m rule --add subrole="AXSystemFloatingWindow" manage=off sticky=on sub-layer=above
# FIXED: window_type is not a valid yabai rule property - use subrole for window types
# OLD: yabai -m rule --add window_type="^(dialog|utility|toolbar|splash)$" manage=off sub-layer=below
# NEW: Use subrole to catch dialog and utility windows (common accessibility subroles)
yabai -m rule --add subrole="^AX(Dialog|Sheet)$" manage=off sub-layer=below
yabai -m rule --add subrole="^AXSystemDialog$" manage=off sub-layer=below
yabai -m rule --add role="^AXWindow$" subrole="^AXUnknown$" manage=off sub-layer=below
yabai -m rule --add title="(Preferences|Settings|Options|Configuration|About|Library|Queue)" manage=off sub-layer=below
yabai -m rule --add title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off sub-layer=below

# --- Apply Rules to Existing Windows ----------------------------------------
# CRITICAL: Rules only apply at window creation time. Force application to existing windows.
yabai -m rule --apply
echo "yabai: ✓ Rules applied to existing windows"

# --- Validation & Startup ---------------------------------------------------
if yabai -m query --windows >/dev/null 2>&1; then
    echo "yabai: ✓ Configuration loaded ($SPACE_COUNT spaces configured)"

    sleep 0.5
    pgrep -x sketchybar >/dev/null && echo "yabai: ✓ SketchyBar active" || echo "yabai: ! SketchyBar missing" >&2
    pgrep -x skhd >/dev/null && echo "yabai: ✓ skhd active" || echo "yabai: ! skhd missing" >&2
    pgrep -f borders >/dev/null && echo "yabai: ✓ JankyBorders active" || echo "yabai: ! JankyBorders missing" >&2

    # Critical: Force initial SketchyBar sync after all services are ready
    sleep 1.0
    if pgrep -x sketchybar >/dev/null; then
      sketchybar --trigger space_change 2>/dev/null || true
      sketchybar --trigger windows_on_spaces 2>/dev/null || true 
      sketchybar --trigger window_focus 2>/dev/null || true
      echo "yabai: ✓ SketchyBar events synchronized"
    fi

    yabai -m config window_opacity_duration 0.25
    echo "yabai: ✓ System ready"
else
    echo "yabai: ! Configuration validation failed" >&2
fi
