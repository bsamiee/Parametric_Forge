# Title         : yazi.toml
# Author        : Bardia Samiee
# Project       : Parametric Forge
# License       : MIT
# Path          : /01.home/00.core/configs/apps/yazi/yazi.toml
# ----------------------------------------------------------------------------
# Yazi terminal file manager configuration

# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
ratio = [1, 5, 3]                          # Optimized ratio: minimal parent, large current, preview
sort_by = "natural"                        # Natural sort: 1.md < 2.md < 10.md (better than alphabetical)
sort_sensitive = false
sort_reverse = false
sort_dir_first = true
sort_translit = true                       # Better handling of international characters
linemode = "mtime"                         # Show modification time for workflow context
show_hidden = false
show_symlink = true
scrolloff = 8                              # Keep 8 lines visible for better scrolling context
mouse_events = ["click", "scroll", "drag"] # Full mouse support
title_format = "Yazi: {cwd}"

[preview]
wrap = "no"
tab_size = 2
max_width = 600
max_height = 900
cache_dir = ""                 # Use default XDG cache directory
image_delay = 30               # WezTerm optimized: 30ms prevents flicker
image_filter = "triangle"
image_quality = 75
ueberzug_scale = 1
ueberzug_offset = [0, 0, 0, 0]

[plugin]
fetchers = [
  # Git status for files and directories
  { id = "git", name = "*", run = "git" },
  { id = "git", name = "*/", run = "git" },
  # Mimetype detection with high priority
  { id = "mime", name = "*", run = "mime", prio = "high" },
]
spotters = [
  { name = "*/", run = "folder" },
  # Code
  { mime = "text/*", run = "code" },
  { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
  # Image
  { mime = "image/{avif,hei?,jxl}", run = "magick" },
  { mime = "image/svg+xml", run = "svg" },
  { mime = "image/*", run = "image" },
  # Video
  { mime = "video/*", run = "video" },
  # Fallback
  { name = "*", run = "file" },
]
preloaders = [
  # Image
  { mime = "image/{avif,hei?,jxl}", run = "magick" },
  { mime = "image/svg+xml", run = "svg" },
  { mime = "image/*", run = "image" },
  # Video
  { mime = "video/*", run = "video" },
  # PDF
  { mime = "application/pdf", run = "pdf" },
  # Font
  { mime = "font/*", run = "font" },
  { mime = "application/ms-opentype", run = "font" },
]
previewers = [
  { name = "*/", run = "folder" },
  # Code
  { mime = "text/*", run = "code" },
  { mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
  # JSON
  { mime = "application/{json,ndjson}", run = "json" },
  # Image
  { mime = "image/{avif,hei?,jxl}", run = "magick" },
  { mime = "image/svg+xml", run = "svg" },
  { mime = "image/*", run = "image" },
  # Video
  { mime = "video/*", run = "video" },
  # PDF
  { mime = "application/pdf", run = "pdf" },
  # Archive
  { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
  { mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
  { name = "*.{AppImage,appimage}", run = "archive" },
  # Virtual Disk / Disk Image
  { mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
  { mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
  { name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
  # Font
  { mime = "font/*", run = "font" },
  { mime = "application/ms-opentype", run = "font" },
  # Empty file
  { mime = "inode/empty", run = "empty" },
  # Fallback
  { name = "*", run = "file" },
]

[opener]
# Text editors - nvim primary, EDITOR env var (set to nvim in environment.nix)
edit = [
  { run = '$EDITOR "$@"', desc = "Neovim", block = true, for = "macos" },
  { run = 'code "$@"', desc = "VS Code", orphan = true, for = "macos" },
]

# File opening - macOS system default
open = [{ run = 'open "$@"', desc = "Open", for = "macos", orphan = true }]

# Reveal in Finder - macOS integration
reveal = [{ run = 'open -R "$1"', desc = "Reveal in Finder", for = "macos" }]

# Archive extraction - 7zz (modern 7-Zip with RAR support from _7zz-rar package)
extract = [
  { run = '7zz x -y "$@"', desc = "Extract with full paths", for = "macos" },
]

# Media playback - MPV (high-performance, developer-focused)
play = [
  { run = 'mpv --player-operation-mode=pseudo-gui "$@"', orphan = true, desc = "MPV Player", for = "macos" },
  { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "macos" },
]

# Web browsing - terminal first in yazi context
browse = [
  { run = 'w3m "$@"', block = true, desc = "w3m (Terminal Browser)", for = "macos" },
  { run = 'open "$@"', orphan = true, desc = "Default Browser", for = "macos" },
]

[open]
rules = [
  # Directories
  { name = "*/", use = [
    "open",
    "reveal",
  ] },

  # Text files - prefer editing
  { mime = "text/*", use = [
    "edit",
    "reveal",
  ] },

  # Configuration files
  { name = "*.{json,toml,yaml,yml,xml,ini}", use = [
    "edit",
    "reveal",
  ] },
  { name = "*.{js,mjs,cjs,ts,tsx,jsx}", use = [
    "edit",
    "reveal",
  ] },

  # Web files - browse first in yazi context
  { mime = "text/html", use = [
    "browse",
    "open",
    "reveal",
  ] },
  { name = "*.{html,htm,xhtml}", use = [
    "browse",
    "open",
    "reveal",
  ] },

  # Images
  { mime = "image/*", use = [
    "open",
    "reveal",
  ] },

  # Videos and Audio
  { mime = "video/*", use = [
    "play",
    "reveal",
  ] },
  { mime = "audio/*", use = [
    "play",
    "reveal",
  ] },

  # Documents
  { mime = "application/pdf", use = [
    "open",
    "reveal",
  ] },

  # Archives - extract first
  { mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [
    "extract",
    "open",
    "reveal",
  ] },
  { mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", use = [
    "extract",
    "open",
    "reveal",
  ] },
  { name = "*.{zip,rar,7z,tar,gz,bz2,xz,zst,AppImage,appimage}", use = [
    "extract",
    "open",
    "reveal",
  ] },

  # Development files
  { name = "*.{nix,lock,rs,go,c,cpp,h,hpp,py,rb,lua}", use = [
    "edit",
    "reveal",
  ] },
  { name = "{Makefile,justfile,Dockerfile}", use = [
    "edit",
    "reveal",
  ] },

  # Design files - specialized workflow files
  { name = "*.{3dm,3dmbak,gh,ghx}", use = [
    "open",
    "reveal",
  ] }, # Rhino/Grasshopper
  { name = "*.{dwg,dxf,dwt,rvt,rfa,rft}", use = [
    "open",
    "reveal",
  ] }, # CAD
  { name = "*.{blend,blend1}", use = [
    "open",
    "reveal",
  ] }, # Blender
  { name = "*.{psd,psb,ai,ait}", use = [
    "open",
    "reveal",
  ] }, # Adobe
  { name = "*.{indd,idml,indt}", use = [
    "open",
    "reveal",
  ] }, # InDesign

  # Empty files
  { mime = "inode/empty", use = [
    "edit",
    "reveal",
  ] },

  # Default fallback
  { name = "*", use = [
    "open",
    "reveal",
  ] },
]

[tasks]
micro_workers = 10
macro_workers = 10
bizarre_retry = 3
image_alloc = 536870912    # 512MB - WezTerm can handle larger images efficiently
image_bound = [4096, 4096]
suppress_preload = false   # Enable preloading for better performance

[input]
cursor_blink = true # Visual feedback for cursor position

# Directory navigation
cd_title = "Change directory to:"
cd_origin = "top-center"
cd_offset = [0, 3, 60, 3]

# File/directory creation
create_title = ["Create file:", "Create directory:"]
create_origin = "top-center"
create_offset = [0, 3, 60, 3]

# File renaming
rename_title = "Rename to:"
rename_origin = "hovered"
rename_offset = [0, 1, 60, 3]

# File filtering
filter_title = "Filter:"
filter_origin = "top-center"
filter_offset = [0, 3, 60, 3]

# File finding
find_title = ["Find next:", "Find previous:"]
find_origin = "top-center"
find_offset = [0, 3, 60, 3]

# Content searching
search_title = "Search via {n}:"
search_origin = "top-center"
search_offset = [0, 3, 70, 3]

# Shell command execution
shell_title = ["Shell:", "Shell (block):"]
shell_origin = "top-center"
shell_offset = [0, 3, 70, 3]

[confirm]
# Trash confirmation
trash_title = "Trash {n} selected file{s}?"
trash_origin = "center"
trash_offset = [0, 0, 70, 20]

# Delete confirmation
delete_title = "Permanently delete {n} selected file{s}?"
delete_origin = "center"
delete_offset = [0, 0, 70, 20]

# Overwrite confirmation
overwrite_title = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin = "center"
overwrite_offset = [0, 0, 50, 15]

# Quit confirmation
quit_title = "Quit?"
quit_content = "The following tasks are still running, are you sure you want to quit?"
quit_origin = "center"
quit_offset = [0, 0, 50, 15]

[pick]
open_title = "Open with:"
open_origin = "hovered"
open_offset = [0, 1, 50, 7]

[which]
sort_by = "none"
sort_sensitive = false
sort_reverse = false
sort_translit = false
