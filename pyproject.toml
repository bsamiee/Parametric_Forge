# Title         : pyproject.toml
# Author        : Bardia Samiee
# Project       : Parametric Forge
# License       : MIT
# Path          : pyproject.toml
# ----------------------------------------------------------------------------
# Minimal project configuration for Claude memory hooks and tools

[project]
name = "parametric-forge"
version = "0.1.0"
description = "Multi-platform configuration management using Nix flakes"
authors = [{ name = "Bardia Samiee", email = "b.samiee93@gmail.com" }]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.13,<3.14"
keywords = ["nix", "configuration", "hooks", "claude"]
dependencies = [
    "numpy==2.3.2",
    "sentence-transformers==5.1.0",
]

# --- Tool Configurations ----------------------------------------------------

# --- Ruff Configuration (Linting & Formatting) ------------------------------
[tool.ruff]
target-version = "py313"
line-length = 120
preview = true
src = ["01.home/02.assets/ai/claude"]
cache-dir = ".cache/ruff"
exclude = [
    "**/.venv/**",
    "**/.cache/**",
    "**/node_modules/**",
    "**/.mypy_cache/**",
    "**/.pytest_cache/**",
    "**/.ruff_cache/**",
    "**/.history/**",
    "**/dist/**",
    "**/build/**",
]

[tool.ruff.lint]
extend-select = [
    "A",     # flake8-builtins
    "AIR",   # Airflow
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle errors
    "EM",    # flake8-errmsg
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "FA",    # flake8-future-annotations
    "FAST",  # FastAPI
    "FBT",   # flake8-boolean-trap
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "PERF",  # Perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PLC",   # Pylint: Convention
    "PLE",   # Pylint: Error
    "PLR",   # Pylint: Refactor
    "PLW",   # Pylint: Warning
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T20",   # flake8-print
    "TC",    # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
    "DOC",   # pydoclint
]
extend-ignore = [
    "COM812",  # Conflicts with formatter
    "E701",    # Allow inline code for match statements
    "D203",    # one-blank-line-before-class
    "D205",    # blank line required between summary and description
    "D212",    # multi-line-summary-first-line
    "D400",    # First line should end with a period
    "D401",    # First line should be in imperative mood
    "D405",    # Section name should be properly capitalized
    "D406",    # Section name should end with a newline
    "D407",    # Missing dashed underline after section
    "D408",    # Section underline should be in the line following the section's name
    "D409",    # Section underline should match the length of its name
    "D410",    # Missing blank line after section
    "D411",    # Missing blank line before section
    "D413",    # Missing blank line after last section
    "D414",    # Section has no content
    "D415",    # First line should end with a period, question mark, or exclamation point
    "D416",    # Section name should end with a colon
    "DOC201",  # Don't require Returns section in docstrings
    "DOC501",  # Don't require exception documentation in docstrings
    "FBT001",  # Boolean positional arg in function definition
    "PLC2701", # Ignore private import usage in your own project
    "PYI001",  # TypeVar names should be prefixed with `_`
    "PYI010",  # Don't remove __str__ from stub files
    "PYI011",  # Don't flag typed self in stub files
    "RUF029",  # Function is declared async but doesn't use await
    "ARG001",  # Unused function argument
]
fixable = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
allow-magic-value-types = ["int", "str"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
    "F401",    # imported but unused (we re-export in __init__.py)
    "PLC0414", # import alias does not rename (x as x pattern for re-exports)
    "RUF022",  # unsorted __all__ (we want logical grouping, not alphabetical)
    "RUF100",  # unused noqa directives (sometimes needed for re-exports)
    "TC004",   # move import out of type-checking block (we want TYPE_CHECKING for re-exports)
    "I001",    # import block is un-sorted (we use logical grouping with section comments)
    "E402",    # module level import not at top of file (we use imports in __getattr__)
    "PLC0415", # import outside top-level (needed for lazy loading in __getattr__)
    "ANN401",  # dynamically typed expressions (Any) - needed for __getattr__
    "TRY003",  # avoid long messages outside exception class (standard __getattr__ pattern)
    "EM102",   # exception must not use f-string literal (standard __getattr__ pattern)
]
"tests/*" = [
    "S101",    # assert usage
    "D",       # docstring requirements
    "ANN",     # missing type annotations
    "PLR2004", # magic value in comparison
    "ARG002",  # unused arguments (fixtures)
    "PLR6301", # methods that could be static/functions
    "PLC0415", # import within function
    "PT023",   # use parentheses on fixtures/marks
    "PT006",   # wrong parametrize tuple type
]
"01.home/02.assets/ai/claude/hooks/*.py" = ["S603", "S607"]  # Allow subprocess for hooks

# --- Mypy Configuration -----------------------------------------------------
[tool.mypy]
python_version = "3.13"
mypy_path = ["$MYPY_CONFIG_FILE_DIR/01.home/02.assets/ai/claude"]
cache_dir = ".cache/mypy"
namespace_packages = true
explicit_package_bases = true
plugins = ["pydantic.mypy"]
incremental = true
local_partial_types = true
exclude = [
    "\\.venv/",
    "\\.cache/",
    "node_modules/",
    "\\.mypy_cache/",
    "\\.pytest_cache/",
    "\\.ruff_cache/",
    "\\.history/",
    "dist/",
    "build/",
]

# Strictness
strict = true
show_error_codes = true
ignore_missing_imports = true
check_untyped_defs = true
no_implicit_optional = true
disallow_untyped_defs = true
disallow_any_unimported = true
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
no_implicit_reexport = false

# Output
pretty = true
show_column_numbers = true
show_error_context = true

[tool.pydantic-mypy]
init_typed = true
init_forbid_extra = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "sentence_transformers.*",
    "numpy.*",
    "sqlite3.*",
]

[[tool.mypy.overrides]]
module = ["tests.*", "tests"]
disallow_untyped_defs = false
check_untyped_defs = true
warn_unused_ignores = true
warn_return_any = false
ignore_missing_imports = true

# --- Basedpyright Configuration ---------------------------------------------
[tool.basedpyright]
pythonVersion = "3.13"
typeCheckingMode = "strict"
include = ["01.home/02.assets/ai/claude"]
extraPaths = ["01.home/02.assets/ai/claude"]
exclude = [
    "**/.venv/**",
    "**/.cache/**",
    "**/node_modules/**",
    "**/.mypy_cache/**",
    "**/.pytest_cache/**",
    "**/.ruff_cache/**",
    "**/.history/**",
    "**/dist/**",
    "**/build/**",
]

# Strictness (using basedpyright's enhanced rules)
strictListInference = true
strictDictionaryInference = true
strictParameterNoneValue = true
strictSetInference = true

# Reporting - Error level for important issues
reportMissingImports = "none"
reportMissingModuleSource = "none"
reportDeprecated = "error"
reportMissingTypeStubs = "error"
reportIncompleteStub = "error"
reportInvalidStubStatement = "error"
reportImportCycles = "error"
reportDuplicateImport = "error"
reportUnusedImport = "error"
reportImplicitStringConcatenation = "error"
reportUnknownMemberType = "error"
reportUnknownVariableType = "error"
reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssertAlwaysTrue = "error"
reportAssertTypeFailure = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallIssue = "error"
reportSelfClsParameterName = "error"
reportRedeclaration = "error"
reportPrivateUsage = "error"
reportMissingParameterType = "error"
reportPossiblyUnboundVariable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportOptionalIterable = "error"
reportMissingTypeArgument = "error"
reportMissingSuperCall = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportInconsistentConstructor = "error"
reportOverlappingOverload = "error"
reportUninitializedInstanceVariable = "error"
reportCallInDefaultInitializer = "error"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportShadowedImports = "error"
reportUnknownParameterType = "error"
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportGeneralTypeIssues = "error"
reportUndefinedVariable = "error"
reportUnboundVariable = "error"
reportUnsupportedDunderAll = "error"
reportInvalidTypeVarUse = "error"
reportInvalidTypeForm = "error"
reportInvalidTypeArguments = "error"
reportImplicitOverride = "error"

# Basedpyright-specific enhanced rules
reportAny = false
reportExplicitAny = false
reportIgnoreCommentWithoutRule = true
reportPrivateLocalImportUsage = false
reportImplicitRelativeImport = "error"
reportInvalidCast = "error"
reportUnsafeMultipleInheritance = "warning"
reportPropertyTypeMismatch = "error"
reportUnnecessaryContains = "warning"
reportUnusedCoroutine = "error"
useLibraryCodeForTypes = true

# --- Pytest Configuration (if you add tests) -------------------------------
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = """
    -ra
    --strict-markers
    --strict-config
    --failed-first
    --tb=short
"""

# --- Coverage Configuration (if you add tests) -----------------------------
[tool.coverage.run]
source = ["01.home/02.assets/ai/claude"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]